# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Order {
  id: ID!
  createdAt: DateTime
  status: OrderStatusType
  paymentAuthority: BigInt
  totalPrice: Int
  AddressInfo: AddressInfo
  Files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  FilesCount(where: FileWhereInput! = {}): Int
  ParsianPaymentInfo: ParsianPaymentInfo
}

enum OrderStatusType {
  WAITING_FOR_PAYMENT
  PAYED
  PAYMENT_EXPIRED
  IN_HAND
  SENT
  RECEIVED
}

scalar BigInt

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  status: OrderStatusTypeNullableFilter
  paymentAuthority: BigIntNullableFilter
  totalPrice: IntNullableFilter
  AddressInfo: AddressInfoWhereInput
  Files: FileManyRelationFilter
  ParsianPaymentInfo: ParsianPaymentInfoWhereInput
}

input OrderStatusTypeNullableFilter {
  equals: OrderStatusType
  in: [OrderStatusType!]
  notIn: [OrderStatusType!]
  not: OrderStatusTypeNullableFilter
}

input BigIntNullableFilter {
  equals: BigInt
  in: [BigInt!]
  notIn: [BigInt!]
  lt: BigInt
  lte: BigInt
  gt: BigInt
  gte: BigInt
  not: BigIntNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FileManyRelationFilter {
  every: FileWhereInput
  some: FileWhereInput
  none: FileWhereInput
}

input OrderOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  status: OrderDirection
  paymentAuthority: OrderDirection
  totalPrice: OrderDirection
}

input OrderUpdateInput {
  createdAt: DateTime
  status: OrderStatusType
  paymentAuthority: BigInt
  totalPrice: Int
  AddressInfo: AddressInfoRelateToOneForUpdateInput
  Files: FileRelateToManyForUpdateInput
  ParsianPaymentInfo: ParsianPaymentInfoRelateToOneForUpdateInput
}

input AddressInfoRelateToOneForUpdateInput {
  create: AddressInfoCreateInput
  connect: AddressInfoWhereUniqueInput
  disconnect: Boolean
}

input FileRelateToManyForUpdateInput {
  disconnect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input ParsianPaymentInfoRelateToOneForUpdateInput {
  create: ParsianPaymentInfoCreateInput
  connect: ParsianPaymentInfoWhereUniqueInput
  disconnect: Boolean
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  createdAt: DateTime
  status: OrderStatusType
  paymentAuthority: BigInt
  totalPrice: Int
  AddressInfo: AddressInfoRelateToOneForCreateInput
  Files: FileRelateToManyForCreateInput
  ParsianPaymentInfo: ParsianPaymentInfoRelateToOneForCreateInput
}

input AddressInfoRelateToOneForCreateInput {
  create: AddressInfoCreateInput
  connect: AddressInfoWhereUniqueInput
}

input FileRelateToManyForCreateInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input ParsianPaymentInfoRelateToOneForCreateInput {
  create: ParsianPaymentInfoCreateInput
  connect: ParsianPaymentInfoWhereUniqueInput
}

type File {
  id: ID!
  bounding: Boolean
  colorMode: FileColorModeType
  data: FileFieldOutput
  dataAsBase64: String
  description: String
  double: Boolean
  name: String
  pageCount: Int
  pageSize: FilePageSizeType
  series: Int
  size: Int
  type: String
  Order: Order
}

enum FileColorModeType {
  BLACK_WHITE_LASER
  COLOR_LASER
  COLOR_INK
  COLOR_DIGITAL
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

enum FilePageSizeType {
  A5
  A4
  A3
}

input FileWhereUniqueInput {
  id: ID
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IDFilter
  bounding: BooleanFilter
  colorMode: FileColorModeTypeNullableFilter
  dataAsBase64: StringFilter
  description: StringFilter
  double: BooleanFilter
  name: StringFilter
  pageCount: IntNullableFilter
  pageSize: FilePageSizeTypeNullableFilter
  series: IntNullableFilter
  size: IntNullableFilter
  type: StringFilter
  Order: OrderWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input FileColorModeTypeNullableFilter {
  equals: FileColorModeType
  in: [FileColorModeType!]
  notIn: [FileColorModeType!]
  not: FileColorModeTypeNullableFilter
}

input FilePageSizeTypeNullableFilter {
  equals: FilePageSizeType
  in: [FilePageSizeType!]
  notIn: [FilePageSizeType!]
  not: FilePageSizeTypeNullableFilter
}

input FileOrderByInput {
  id: OrderDirection
  bounding: OrderDirection
  colorMode: OrderDirection
  dataAsBase64: OrderDirection
  description: OrderDirection
  double: OrderDirection
  name: OrderDirection
  pageCount: OrderDirection
  pageSize: OrderDirection
  series: OrderDirection
  size: OrderDirection
  type: OrderDirection
}

input FileUpdateInput {
  bounding: Boolean
  colorMode: FileColorModeType
  data: FileFieldInput
  dataAsBase64: String
  description: String
  double: Boolean
  name: String
  pageCount: Int
  pageSize: FilePageSizeType
  series: Int
  size: Int
  type: String
  Order: OrderRelateToOneForUpdateInput
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input FileUpdateArgs {
  where: FileWhereUniqueInput!
  data: FileUpdateInput!
}

input FileCreateInput {
  bounding: Boolean
  colorMode: FileColorModeType
  data: FileFieldInput
  dataAsBase64: String
  description: String
  double: Boolean
  name: String
  pageCount: Int
  pageSize: FilePageSizeType
  series: Int
  size: Int
  type: String
  Order: OrderRelateToOneForCreateInput
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type AddressInfo {
  id: ID!
  fullName: String
  city: String
  mobileNumber: String
  postalAddress: String
  postalCode: String
  province: String
  Order: Order
}

input AddressInfoWhereUniqueInput {
  id: ID
}

input AddressInfoWhereInput {
  AND: [AddressInfoWhereInput!]
  OR: [AddressInfoWhereInput!]
  NOT: [AddressInfoWhereInput!]
  id: IDFilter
  fullName: StringFilter
  city: StringFilter
  mobileNumber: StringFilter
  postalAddress: StringFilter
  postalCode: StringFilter
  province: StringFilter
  Order: OrderWhereInput
}

input AddressInfoOrderByInput {
  id: OrderDirection
  fullName: OrderDirection
  city: OrderDirection
  mobileNumber: OrderDirection
  postalAddress: OrderDirection
  postalCode: OrderDirection
  province: OrderDirection
}

input AddressInfoUpdateInput {
  fullName: String
  city: String
  mobileNumber: String
  postalAddress: String
  postalCode: String
  province: String
  Order: OrderRelateToOneForUpdateInput
}

input AddressInfoUpdateArgs {
  where: AddressInfoWhereUniqueInput!
  data: AddressInfoUpdateInput!
}

input AddressInfoCreateInput {
  fullName: String
  city: String
  mobileNumber: String
  postalAddress: String
  postalCode: String
  province: String
  Order: OrderRelateToOneForCreateInput
}

type ParsianPaymentInfo {
  id: ID!
  createResponseStatus: Int
  createResponseMessage: String
  createResponseToken: BigInt
  callbackToken: BigInt
  callbackOrderId: String
  callbackTerminalNumber: BigInt
  callbackRRN: BigInt
  callbackStatus: Int
  callbackAmountAsString: String
  callbackCardNumberHashed: String
  callbackAmount: BigInt
  confirmResponseStatus: Int
  confirmResponseCardNumberMasked: String
  confirmResponseToken: BigInt
  confirmResponseRRN: BigInt
  reversalResponseStatus: Int
  reversalResponseMessage: String
  reversalResponseToken: BigInt
  Order: Order
}

input ParsianPaymentInfoWhereUniqueInput {
  id: ID
}

input ParsianPaymentInfoWhereInput {
  AND: [ParsianPaymentInfoWhereInput!]
  OR: [ParsianPaymentInfoWhereInput!]
  NOT: [ParsianPaymentInfoWhereInput!]
  id: IDFilter
  createResponseStatus: IntNullableFilter
  createResponseMessage: StringFilter
  createResponseToken: BigIntNullableFilter
  callbackToken: BigIntNullableFilter
  callbackOrderId: StringFilter
  callbackTerminalNumber: BigIntNullableFilter
  callbackRRN: BigIntNullableFilter
  callbackStatus: IntNullableFilter
  callbackAmountAsString: StringFilter
  callbackCardNumberHashed: StringFilter
  callbackAmount: BigIntNullableFilter
  confirmResponseStatus: IntNullableFilter
  confirmResponseCardNumberMasked: StringFilter
  confirmResponseToken: BigIntNullableFilter
  confirmResponseRRN: BigIntNullableFilter
  reversalResponseStatus: IntNullableFilter
  reversalResponseMessage: StringFilter
  reversalResponseToken: BigIntNullableFilter
  Order: OrderWhereInput
}

input ParsianPaymentInfoOrderByInput {
  id: OrderDirection
  createResponseStatus: OrderDirection
  createResponseMessage: OrderDirection
  createResponseToken: OrderDirection
  callbackToken: OrderDirection
  callbackOrderId: OrderDirection
  callbackTerminalNumber: OrderDirection
  callbackRRN: OrderDirection
  callbackStatus: OrderDirection
  callbackAmountAsString: OrderDirection
  callbackCardNumberHashed: OrderDirection
  callbackAmount: OrderDirection
  confirmResponseStatus: OrderDirection
  confirmResponseCardNumberMasked: OrderDirection
  confirmResponseToken: OrderDirection
  confirmResponseRRN: OrderDirection
  reversalResponseStatus: OrderDirection
  reversalResponseMessage: OrderDirection
  reversalResponseToken: OrderDirection
}

input ParsianPaymentInfoUpdateInput {
  createResponseStatus: Int
  createResponseMessage: String
  createResponseToken: BigInt
  callbackToken: BigInt
  callbackOrderId: String
  callbackTerminalNumber: BigInt
  callbackRRN: BigInt
  callbackStatus: Int
  callbackAmountAsString: String
  callbackCardNumberHashed: String
  callbackAmount: BigInt
  confirmResponseStatus: Int
  confirmResponseCardNumberMasked: String
  confirmResponseToken: BigInt
  confirmResponseRRN: BigInt
  reversalResponseStatus: Int
  reversalResponseMessage: String
  reversalResponseToken: BigInt
  Order: OrderRelateToOneForUpdateInput
}

input ParsianPaymentInfoUpdateArgs {
  where: ParsianPaymentInfoWhereUniqueInput!
  data: ParsianPaymentInfoUpdateInput!
}

input ParsianPaymentInfoCreateInput {
  createResponseStatus: Int
  createResponseMessage: String
  createResponseToken: BigInt
  callbackToken: BigInt
  callbackOrderId: String
  callbackTerminalNumber: BigInt
  callbackRRN: BigInt
  callbackStatus: Int
  callbackAmountAsString: String
  callbackCardNumberHashed: String
  callbackAmount: BigInt
  confirmResponseStatus: Int
  confirmResponseCardNumberMasked: String
  confirmResponseToken: BigInt
  confirmResponseRRN: BigInt
  reversalResponseStatus: Int
  reversalResponseMessage: String
  reversalResponseToken: BigInt
  Order: OrderRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createFile(data: FileCreateInput!): File
  createFiles(data: [FileCreateInput!]!): [File]
  updateFile(where: FileWhereUniqueInput!, data: FileUpdateInput!): File
  updateFiles(data: [FileUpdateArgs!]!): [File]
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFiles(where: [FileWhereUniqueInput!]!): [File]
  createAddressInfo(data: AddressInfoCreateInput!): AddressInfo
  createAddressInfos(data: [AddressInfoCreateInput!]!): [AddressInfo]
  updateAddressInfo(where: AddressInfoWhereUniqueInput!, data: AddressInfoUpdateInput!): AddressInfo
  updateAddressInfos(data: [AddressInfoUpdateArgs!]!): [AddressInfo]
  deleteAddressInfo(where: AddressInfoWhereUniqueInput!): AddressInfo
  deleteAddressInfos(where: [AddressInfoWhereUniqueInput!]!): [AddressInfo]
  createParsianPaymentInfo(data: ParsianPaymentInfoCreateInput!): ParsianPaymentInfo
  createParsianPaymentInfos(data: [ParsianPaymentInfoCreateInput!]!): [ParsianPaymentInfo]
  updateParsianPaymentInfo(where: ParsianPaymentInfoWhereUniqueInput!, data: ParsianPaymentInfoUpdateInput!): ParsianPaymentInfo
  updateParsianPaymentInfos(data: [ParsianPaymentInfoUpdateArgs!]!): [ParsianPaymentInfo]
  deleteParsianPaymentInfo(where: ParsianPaymentInfoWhereUniqueInput!): ParsianPaymentInfo
  deleteParsianPaymentInfos(where: [ParsianPaymentInfoWhereUniqueInput!]!): [ParsianPaymentInfo]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  file(where: FileWhereUniqueInput!): File
  filesCount(where: FileWhereInput! = {}): Int
  addressInfos(where: AddressInfoWhereInput! = {}, orderBy: [AddressInfoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddressInfoWhereUniqueInput): [AddressInfo!]
  addressInfo(where: AddressInfoWhereUniqueInput!): AddressInfo
  addressInfosCount(where: AddressInfoWhereInput! = {}): Int
  parsianPaymentInfos(where: ParsianPaymentInfoWhereInput! = {}, orderBy: [ParsianPaymentInfoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParsianPaymentInfoWhereUniqueInput): [ParsianPaymentInfo!]
  parsianPaymentInfo(where: ParsianPaymentInfoWhereUniqueInput!): ParsianPaymentInfo
  parsianPaymentInfosCount(where: ParsianPaymentInfoWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
